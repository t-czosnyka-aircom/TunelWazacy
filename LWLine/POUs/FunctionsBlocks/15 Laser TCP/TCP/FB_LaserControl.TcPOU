<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="FB_LaserControl" Id="{c83c13f3-5acd-4361-b837-167708037dff}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_LaserControl
VAR_INPUT
	fbTCP_Send: REFERENCE TO FB_TCP_SendString;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	stSendRequest:ST_TCP_SendRequest;
	sDateMonth:STRING;
	sDateWeek:STRING;
	
	iJobRefreshSeq :INT;
	bJobRefreshed : BOOL;
	bJobRefreshError: BOOL;
	bJobRefreshRequest: BOOL;
	fbEnableTCP_RTRIG: R_TRIG;
	iTimeCounter1 :DINT;
	iTimeCounter2 :DINT;
	iTimeCounter3 :DINT;
	bLaserTCPCommunicationError	: BOOL;
	iSelectMarkingSave:INT;
	
	fbTP_SetIntensity_OK: TP;
	fbTP_SetOffset_OK: TP;
	iRefreshSeq: INT;
	bRefreshed:BOOL;
	bRefreshError: BOOL;
	
END_VAR
VAR PERSISTENT
	stHMI_Laser:stHMI_Laser;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[stSendRequest.sIP:='192.168.1.234';
stSendRequest.nPort:= 45678;
stSendRequest.sSuffix:=';;';
stSendRequest.bExpectResponse:=TRUE;

//Wyswietlanie formatu daty
IF GVL_Aircom.stAC_DT_Data.bNew_Minute_IMP THEN
	F_Date_Addition(dtCurrent:= GVL_Aircom.stAC_DT_Data.dtActualDate, addWeeks:=274, addYears:=5, addMonths:=3, sDateYearMonth=>sDateMonth , sDateYearWeek=>sDateWeek );
END_IF
CASE stHMI_Laser.iSelectMarking OF
	0:
		stHMI_Laser.sCurrentDateText:=sDateWeek;
	1:
		stHMI_Laser.sCurrentDateText:=sDateMonth;
END_CASE

//Pobieranie obecnych parametrow
fbEnableTCP_RTRIG(CLK:=stHMI_Laser.bEnableLaserTCPCOmmunication);

//Wybieranie template z lasera
IF  fbEnableTCP_RTRIG.Q OR iSelectMarkingSave <> stHMI_Laser.iSelectMarking THEN
	mRequestJobRefresh();
END_IF


CASE iJobRefreshSeq OF
	0:
		IF bJobRefreshRequest AND stHMI_Laser.bEnableLaserTCPCOmmunication THEN
			bJobRefreshRequest := FALSE;
			iJobRefreshSeq := 10;
			iTimeCounter3 := 0;
		END_IF
	
	10: //Ustaw template w laserze
		IF mSetJob('PLC.bpd') THEN
			IF stSendRequest.bResponseACK THEN
				iJobRefreshSeq := 20;
			ELSE
				bJobRefreshError := TRUE;
				bJobRefreshed :=FALSE;
				iJobRefreshSeq := 0;
			END_IF
		END_IF
		
		
	20: //Wyslij date do lasera
		IF mSetDateVariable(iMarkingNumber:=stHMI_Laser.iSelectMarking) THEN
			IF stSendRequest.bResponseACK THEN
				bJobRefreshed := TRUE;
			ELSE
				bJobRefreshError := TRUE;
				bJobRefreshed :=FALSE;
			END_IF
			iJobRefreshSeq := 0;
		END_IF
		
END_CASE

iSelectMarkingSave := stHMI_Laser.iSelectMarking;

//Timeouts

IF stSendRequest.bSent AND stSendRequest.bDone THEN
	iTimeCounter1 := iTimeCounter1 +1;
END_IF

IF stSendRequest.bSent AND NOT stSendRequest.bProcesseingInProgress  THEN
	iTimeCounter2 := iTimeCounter2 +1;
END_IF

IF iJobRefreshSeq <> 0 THEN
	iTimeCounter3 := iTimeCounter3 +1;
END_IF


IF NOT stHMI_Laser.bEnableLaserTCPCOmmunication OR iTimeCounter2 >= 15000 OR  iTimeCounter1 >= 1000 OR iTimeCounter3 > 3000 THEN
	iJobRefreshSeq := 0;
	iRefreshSeq := 0;
	stSendRequest.bSent := FALSE;
	iTimeCounter1 := 0;
	iTimeCounter2 := 0;
	iTimeCounter3 := 0;
END_IF


//IF fbEnableTCP_RTRIG.Q OR stHMI_Laser.bReqRefreshParams THEN
//	mRefreshParams();
//END_IF

//stHMI_Laser.bRefreshError:=bRefreshError;

////Ustaw Moc
//stHMI_Laser.iIntensity_OUT := LIMIT(0,stHMI_Laser.iIntensity_OUT,100);

//IF stHMI_Laser.bReqSetIntensity THEN
//	IF mSetPower(USINT_TO_REAL(stHMI_Laser.iIntensity_OUT)) THEN
//		stHMI_Laser.bReqSetIntensity := FALSE;
//		IF stSendRequest.bResponseACK THEN
//			fbTP_SetIntensity_OK(IN:=TRUE,PT:=T#3S);
//			mRefreshParams();
//		END_IF
//	END_IF
//END_IF

////Ustaw Pozycje
//IF stHMI_Laser.bReqSetPosition THEN
//	IF mSetPosition(stHMI_Laser.iPositionX_OUT, stHMI_Laser.iPositionY_OUT) THEN
//		stHMI_Laser.bReqSetPosition := FALSE;
//		IF stSendRequest.bResponseACK THEN
//			fbTP_SetOffset_OK(IN:=TRUE,PT:=T#3S);
//			mRefreshParams();
//		END_IF
//	END_IF
//END_IF

//fbTP_SetIntensity_OK(IN:=FALSE);
//fbTP_SetOffset_OK(IN:=FALSE);

//stHMI_Laser.bSetIntensityOK:= fbTP_SetIntensity_OK.Q;
//stHMI_Laser.bSetPositionOK := fbTP_SetOffset_OK.Q;


//CASE iRefreshSeq OF
//	0: 	
//		IF NOT bRefreshed AND NOT bRefreshError THEN
//			iRefreshSeq := 10;
//		END_IF
		
//	10:
//		IF mGetPower(iPower=>stHMI_Laser.iIntensity_IN) THEN
//			IF stSendRequest.bResponseACK THEN
//				iRefreshSeq := 20;
//			ELSE
//				bRefreshError := TRUE;
//				iRefreshSeq := 0;
//			END_IF
//		END_IF
	
//	20: 		
//		IF mGetPosition(sShapeName:='Data',iPositionX_IN => stHMI_Laser.iPositionX_IN,iPositionY_IN => stHMI_Laser.iPositionY_IN) THEN
//			IF stSendRequest.bResponseACK THEN
//				bRefreshed := TRUE;
//			ELSE
//				bRefreshError := TRUE;
//			END_IF
//			iRefreshSeq := 0;
//		END_IF
		
//END_CASE

]]></ST>
    </Implementation>
    <Folder Name="NotUsed" Id="{b9a46dae-6586-40cc-912a-50ba167337de}" />
    <Method Name="mGetJob" Id="{3947ce45-3e4d-49a0-8056-a597370e0060}" FolderPath="NotUsed\">
      <Declaration><![CDATA[METHOD mGetJob : BOOL
VAR_INPUT
END_VAR
VAR CONSTANT
	REQ_ID: UDINT:=5;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[mGetJob:=mSendToLaser('GetJob;','',REQ_ID);]]></ST>
      </Implementation>
    </Method>
    <Method Name="mGetPosition" Id="{2367b655-75f0-4505-8cce-3ac2870a4de7}" FolderPath="NotUsed\">
      <Declaration><![CDATA[METHOD mGetPosition : BOOL
VAR_INPUT
	sShapeName: STRING;
END_VAR
VAR CONSTANT
	REQ_ID: UDINT:=6;
END_VAR
VAR
	sTemp :STRING;
	ind :INT;
END_VAR

VAR_OUTPUT
	iPositionX_IN: UDINT;
	iPositionY_IN: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[mGetPosition:=FALSE;
IF mSendToLaser(CONCAT('GetShapePos,',sShapeName),sShapeName,REQ_ID) THEN
	IF stSendRequest.bResponseACK THEN
		sTemp:=DELETE(stSendRequest.sResponse,LEN(stSendRequest.sACK_Response)+1,0);
		ind := FIND(sTemp,',');
		iPositionX_IN := STRING_TO_UDINT(LEFT(sTemp,ind-1));
		sTemp:=DELETE(sTemp,ind+1,0);
		ind := FIND(sTemp,',');
		iPositionY_IN  := STRING_TO_UDINT(LEFT(sTemp,ind-1));
	END_IF
	mGetPosition:=TRUE;
END_IF



]]></ST>
      </Implementation>
    </Method>
    <Method Name="mGetPower" Id="{53953b76-27ba-4dc0-a7d3-1bc84c9e8d40}" FolderPath="NotUsed\">
      <Declaration><![CDATA[METHOD mGetPower : BOOL
VAR_INPUT
END_VAR
VAR_OUTPUT
	iPower:USINT;
END_VAR
VAR CONSTANT
	REQ_ID: UDINT:=7;
END_VAR
VAR
	sTemp:STRING;
	ind: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[mGetPower:=FALSE;
IF mSendToLaser('GetPen,0,Power','',REQ_ID) THEN
	IF stSendRequest.bResponseACK THEN
		ind := FIND(stSendRequest.sResponse,',');
		iPower := STRING_TO_USINT(LEFT(stSendRequest.sResponse,ind-1));
	END_IF
	mGetPower:=TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mRefreshParams" Id="{bb0b2286-bc73-4254-a9e2-a4052e200cf3}" FolderPath="NotUsed\">
      <Declaration><![CDATA[METHOD mRefreshParams : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bRefreshed := FALSE;
bRefreshError := FALSE;
stHMI_Laser.bReqRefreshParams :=FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mRequestJobRefresh" Id="{e9f939ed-4d0f-4002-83e6-306889043567}">
      <Declaration><![CDATA[METHOD mRequestJobRefresh : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bJobRefreshRequest := TRUE;
bJobRefreshError := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mSendToLaser" Id="{159bd3e2-558e-4cfe-9cc3-a5cd14cc78ff}">
      <Declaration><![CDATA[METHOD mSendToLaser : BOOL
VAR_INPUT
	sCommand:STRING;
	sACK_Msg:STRING;
	iMethodID: UDINT;
END_VAR

VAR_OUTPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mSendToLaser :=FALSE;

IF NOT stSendRequest.bSent THEN
	iTimeCounter1 := 0;
	iTimeCounter2 := 0;
	stSendRequest.iId := iMethodID;
	stSendRequest.bDone:=FALSE;
	stSendRequest.bSent := TRUE;
	stSendRequest.sACK_Response:=sACK_Msg;
	stSendRequest.sDataToSend:=sCommand;
	fbTCP_Send.mSendRequest(ADR(stSendRequest));
END_IF;
IF  stSendRequest.iId = iMethodID THEN
	stSendRequest.bSent R= stSendRequest.bDone;
END_IF

mSendToLaser:=stSendRequest.bDone AND stSendRequest.iId = iMethodID; 
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mSetDateVariable" Id="{a209a449-1476-4a84-b59e-5bb67ee72e14}">
      <Declaration><![CDATA[METHOD mSetDateVariable : BOOL
VAR_INPUT
	iMarkingNumber:INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[F_Date_Addition(dtCurrent:= GVL_Aircom.stAC_DT_Data.dtActualDate, addWeeks:=274, addYears:=5, addMonths:=3, sDateYearMonth=>sDateMonth , sDateYearWeek=>sDateWeek );
iMarkingNumber := LIMIT(0,iMarkingNumber,1);
CASE iMarkingNumber OF
	0:
		stHMI_Laser.sCurrentDateText:=sDateWeek;
	1:
		stHMI_Laser.sCurrentDateText:=sDateMonth;
END_CASE
mSetDateVariable := mSetVariable(stHMI_Laser.sCurrentDateText,'Data');

]]></ST>
      </Implementation>
    </Method>
    <Method Name="mSetJob" Id="{b7f915a6-f021-4c9a-8d4a-6cdcffeecdcd}">
      <Declaration><![CDATA[METHOD mSetJob : BOOL
VAR_INPUT
	sJobName:STRING;
END_VAR
VAR CONSTANT
	REQ_ID: UDINT:=1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[mSetJob:=mSendToLaser(CONCAT('SwitchDoc,',sJobName),'Ok;;',REQ_ID);]]></ST>
      </Implementation>
    </Method>
    <Method Name="mSetPosition" Id="{1f653eee-37b5-413a-ab75-0ed293c8af18}" FolderPath="NotUsed\">
      <Declaration><![CDATA[METHOD mSetPosition : BOOL
VAR_INPUT
	iX:UDINT;
	iY:UDINT;
END_VAR
VAR CONSTANT
	REQ_ID: UDINT:=2;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[mSetPosition:=mSendToLaser(CONCAT('SetLayoutPosition;',CONCAT(UDINT_TO_STRING(iX*10000),CONCAT(';',CONCAT(UDINT_TO_STRING(iY*10000),';')))),'',REQ_ID);]]></ST>
      </Implementation>
    </Method>
    <Method Name="mSetPower" Id="{ab358734-7bcd-4dc5-bd67-fa70ba0e69b6}" FolderPath="NotUsed\">
      <Declaration><![CDATA[METHOD mSetPower : BOOL
VAR_INPUT
	iPower:UINT;
END_VAR
VAR CONSTANT
	REQ_ID: UDINT:=4;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
mSetPower :=FALSE;
IF iPower >= 0 AND iPower <= 100  THEN
	mSetPower:=mSendToLaser(CONCAT('SetPen,ID,0,Power,',UINT_TO_STRING(iPower)),'',REQ_ID);
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mSetVariable" Id="{ccd5e1d3-9de5-47bf-82d7-4abcfef219a9}">
      <Declaration><![CDATA[METHOD mSetVariable : BOOL
VAR_INPUT
	sValue:STRING;
	sVarName:STRING;
END_VAR
VAR CONSTANT
	REQ_ID: UDINT:=3;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[mSetVariable:=mSendToLaser(CONCAT('SetShapeData,',CONCAT(sVarName,CONCAT(',',sValue))),'Ok;;',REQ_ID);]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStartMark" Id="{18b5bbcf-fd3b-461f-acbe-e505039cf808}" FolderPath="NotUsed\">
      <Declaration><![CDATA[METHOD mStartMark : BOOL
VAR_INPUT
END_VAR
VAR CONSTANT
	REQ_ID: UDINT:=8;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[mStartMark:=mSendToLaser('StartMark;;','Ok;;',REQ_ID);]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStopMark" Id="{14e90762-2358-4181-a4f8-8acd14e54f72}" FolderPath="NotUsed\">
      <Declaration><![CDATA[METHOD mStopMark : BOOL
VAR_INPUT
END_VAR
VAR CONSTANT
	REQ_ID: UDINT:=9;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[mStopMark:=mSendToLaser('StopMark;;','Ok;;',REQ_ID);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_LaserControl">
      <LineId Id="1488" Count="14" />
      <LineId Id="1722" Count="1" />
      <LineId Id="1721" Count="0" />
      <LineId Id="1568" Count="55" />
      <LineId Id="1625" Count="8" />
      <LineId Id="1715" Count="1" />
      <LineId Id="1718" Count="2" />
      <LineId Id="1634" Count="1" />
      <LineId Id="1644" Count="29" />
      <LineId Id="1676" Count="0" />
      <LineId Id="1680" Count="26" />
      <LineId Id="1641" Count="1" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_LaserControl.mGetJob">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_LaserControl.mGetPosition">
      <LineId Id="13" Count="5" />
      <LineId Id="25" Count="2" />
      <LineId Id="20" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="8" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_LaserControl.mGetPower">
      <LineId Id="60" Count="2" />
      <LineId Id="64" Count="3" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_LaserControl.mRefreshParams">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_LaserControl.mRequestJobRefresh">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_LaserControl.mSendToLaser">
      <LineId Id="8" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="10" Count="2" />
      <LineId Id="76" Count="0" />
      <LineId Id="13" Count="2" />
      <LineId Id="47" Count="1" />
      <LineId Id="46" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="34" Count="0" />
    </LineIds>
    <LineIds Name="FB_LaserControl.mSetDateVariable">
      <LineId Id="59" Count="9" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="FB_LaserControl.mSetJob">
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_LaserControl.mSetPosition">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_LaserControl.mSetPower">
      <LineId Id="21" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_LaserControl.mSetVariable">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_LaserControl.mStartMark">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_LaserControl.mStopMark">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>