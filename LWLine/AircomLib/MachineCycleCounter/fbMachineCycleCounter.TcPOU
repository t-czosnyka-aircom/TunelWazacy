<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="fbMachineCycleCounter" Id="{f86b8b51-6646-066d-3532-ee0c4e6b970b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK fbMachineCycleCounter	//Blok funkcyjny wykorzystywany do obliczenia przebiegu maszyny
VAR_INPUT
	stTimeStruct		: stAircomTimeStruct;
	iMaximalOperations	: ULINT := 100000;
END_VAR
VAR_OUTPUT
	iMakedOperations	: ULINT;
	iMakedCycles		: ULINT;
END_VAR
VAR PERSISTENT
	iOperationCalc		: ULINT;	//Liczba wykonanych operacji
	iCyclesCalc			: ULINT;	//Liczba wykonanych produktów
	bError				: BOOL;
	bWarning			: BOOL;
	arWarningTable		: ARRAY[0..10] OF ULINT;
	arResetHistory		: ARRAY[0..100] OF stResetHistory;
END_VAR
VAR
	fbShiftFilter		: R_TRIG;
	fbErrorOccur		: R_TRIG;
	fbWarningTrigger	: R_TRIG;
	bBlocked			: BOOL;
	sUserName			: STRING;
	bResetAqusitton		: BOOL := TRUE;
	bTempolaryPermit	: BOOL := TRUE;
	bClear				: BOOL;
	bReset				: BOOL;
	iOperationCalcHMI	: UDINT;
	iCyclesCalcHMI		: UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//New shift reader
fbShiftFilter(CLK:=stTimeStruct.bNew_Shift);
fbErrorOccur(CLK:=(iOperationCalc >= iMaximalOperations));
fbWarningTrigger(CLK:=tWarningTrigger);

pError 		S= (fbShiftFilter.Q AND iOperationCalc >= iMaximalOperations) OR fbErrorOccur.Q;
pWarning	S= fbWarningTrigger.Q;

iMakedOperations 	:= iOperationCalc;
iMakedCycles		:= iCyclesCalc;
iOperationCalcHMI	:= ULINT_TO_UDINT(iOperationCalc);
iCyclesCalcHMI		:= ULINT_TO_UDINT(iCyclesCalc);

bBlocked := (GVL.fbUserLogin.sUserName <> '' AND GVL.fbUserLogin.sUserName <> 'Maintenance User') AND GVL.fbUserLogin.bUserLogged;

sUserName	:= GVL.fbUserLogin.sUserName;

IF bClear THEN
	mResetError(sWorkerID := sUserName);
	bClear := FALSE;
END_IF

IF bReset THEN
	mResetOperaionCalc(sWorkerID := sUserName);
	bReset := FALSE;
END_IF]]></ST>
    </Implementation>
    <Method Name="mCalcCycle" Id="{a3a75e60-2570-0415-09bc-e8ca0843042a}">
      <Declaration><![CDATA[METHOD mCalcCycle : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[iCyclesCalc := iCyclesCalc + 1;
mCalcCycle := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mCalcOperation" Id="{df70b1d5-555d-05a8-163f-c116232ccdc7}">
      <Declaration><![CDATA[METHOD mCalcOperation : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[iOperationCalc := iOperationCalc + 1;
mCalcOperation := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mResetError" Id="{27816e82-9c72-0dcd-1865-0e4977b8f917}">
      <Declaration><![CDATA[METHOD mResetError : BOOL
VAR_INPUT
	sWorkerID		: STRING;
END_VAR
VAR
	iBuffer			: UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR iBuffer := 0 TO 100 DO
	IF arResetHistory[iBuffer].iOperationAmout = 0 THEN
		arResetHistory[iBuffer].iCyclesAmount			:= iCyclesCalc;
		arResetHistory[iBuffer].iOperationAmout			:= iOperationCalc;
		arResetHistory[iBuffer].sOperationDescription	:= 'Reseting Error By To Much Of Operations';
		arResetHistory[iBuffer].stDate					:= stTimeStruct;
		arResetHistory[iBuffer].sWorkerID				:= sWorkerID;
		pError := FALSE;
		IF iBuffer < 100 THEN
			MEMSET(destAddr:=ADR(arResetHistory[iBuffer + 1]),fillByte:= 0,n:=SIZEOF(arResetHistory[iBuffer + 1]));
		ELSE
			MEMSET(destAddr:=ADR(arResetHistory[0]),fillByte:= 0,n:=SIZEOF(arResetHistory[0]));	
		END_IF
		EXIT;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="mResetOperaionCalc" Id="{7e9c204d-87a8-0752-3c35-99fc14080479}">
      <Declaration><![CDATA[METHOD mResetOperaionCalc : BOOL
VAR_INPUT
	sWorkerID		: STRING;
END_VAR
VAR
	iBuffer			: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//Add record to history
FOR iBuffer := 0 TO 100 DO
	IF arResetHistory[iBuffer].iOperationAmout = 0 THEN
		arResetHistory[iBuffer].iCyclesAmount			:= iCyclesCalc;
		arResetHistory[iBuffer].iOperationAmout			:= iOperationCalc;
		arResetHistory[iBuffer].sOperationDescription	:= 'Reseting Number Of Operations';
		arResetHistory[iBuffer].stDate					:= stTimeStruct;
		arResetHistory[iBuffer].sWorkerID				:= sWorkerID;
		iOperationCalc := 0;
		IF iBuffer < 100 THEN
			MEMSET(destAddr:=ADR(arResetHistory[iBuffer + 1]),fillByte:= 0,n:=SIZEOF(arResetHistory[iBuffer + 1]));
		ELSE
			MEMSET(destAddr:=ADR(arResetHistory[0]),fillByte:= 0,n:=SIZEOF(arResetHistory[0]));	
		END_IF
		EXIT;
	END_IF
END_FOR
mResetOperaionCalc := (iOperationCalc = 0);]]></ST>
      </Implementation>
    </Method>
    <Method Name="mResetWarning" Id="{0f5c8030-f7c4-0335-1868-083b4db1220f}">
      <Declaration><![CDATA[METHOD mResetWarning : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pWarning := FALSE;
mResetWarning := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="pError" Id="{6e2b6988-54b0-08ee-2417-556729a1442c}">
      <Declaration><![CDATA[PROPERTY pError : BOOL]]></Declaration>
      <Get Name="Get" Id="{36e29819-211c-06ba-2b20-a27d716c494b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[pError	:= bError;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{e3a97019-f62a-0e9b-0a8c-00b947aa84b1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bError	:= pError;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="pWarning" Id="{1648e1a8-e65b-03f4-0f8c-d07fcd89081f}">
      <Declaration><![CDATA[PROPERTY pWarning : BOOL]]></Declaration>
      <Get Name="Get" Id="{6d5c552c-034b-0939-3e18-92d3bffe812b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[pWarning	:= bWarning;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{0e06ce6b-32ed-0e32-20e8-a6bb683645e1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bWarning := pWarning;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Transition Name="tWarningTrigger" Id="{67cbd215-2c2f-0d5f-2ebe-bf06970f33b8}">
      <Implementation>
        <ST><![CDATA[tWarningTrigger := 
	((arWarningTable[0] = iOperationCalc) AND (arWarningTable[0] <> 0)) OR ((arWarningTable[1] = iOperationCalc) AND (arWarningTable[1] <> 0)) OR ((arWarningTable[2] = iOperationCalc) AND (arWarningTable[2] <> 0)) OR
	((arWarningTable[3] = iOperationCalc) AND (arWarningTable[3] <> 0)) OR ((arWarningTable[4] = iOperationCalc) AND (arWarningTable[4] <> 0)) OR ((arWarningTable[5] = iOperationCalc) AND (arWarningTable[5] <> 0)) OR
	((arWarningTable[6] = iOperationCalc) AND (arWarningTable[6] <> 0)) OR ((arWarningTable[7] = iOperationCalc) AND (arWarningTable[7] <> 0)) OR ((arWarningTable[8] = iOperationCalc) AND (arWarningTable[8] <> 0)) OR
	((arWarningTable[9] = iOperationCalc) AND (arWarningTable[9] <> 0)) OR ((arWarningTable[10] = iOperationCalc) AND (arWarningTable[10] <> 0));]]></ST>
      </Implementation>
    </Transition>
    <LineIds Name="fbMachineCycleCounter">
      <LineId Id="101" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="136" Count="1" />
      <LineId Id="135" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="175" Count="1" />
    </LineIds>
    <LineIds Name="fbMachineCycleCounter.mCalcCycle">
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fbMachineCycleCounter.mCalcOperation">
      <LineId Id="5" Count="1" />
    </LineIds>
    <LineIds Name="fbMachineCycleCounter.mResetError">
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="31" Count="1" />
      <LineId Id="34" Count="2" />
      <LineId Id="17" Count="1" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="fbMachineCycleCounter.mResetOperaionCalc">
      <LineId Id="6" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="19" Count="6" />
      <LineId Id="41" Count="0" />
      <LineId Id="26" Count="6" />
      <LineId Id="12" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fbMachineCycleCounter.mResetWarning">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fbMachineCycleCounter.pError.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="fbMachineCycleCounter.pError.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="fbMachineCycleCounter.pWarning.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="fbMachineCycleCounter.pWarning.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="fbMachineCycleCounter.tWarningTrigger">
      <LineId Id="1" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="2" />
    </LineIds>
  </POU>
</TcPlcObject>