<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="fbDataExchangePIM" Id="{e8ab9f09-9970-43bf-ae07-dd800a2d1129}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK fbDataExchangePIM
VAR_IN_OUT
	stMachineDataPIM : stPimMachineData;
END_VAR
VAR_INPUT
	//All purpose data
	sIpAdress 						: STRING(15);				// Ip Adress of machine
	iPort							: UINT;						// Port of the machine
	iUnitId							: BYTE;						// Id of Slave
	tCommunicationTimeOut			: TIME;						// Time until error 
	iCommunicationPerformEvery		: INT;						// Perform data exchange every ms
	bEnableCommunication			: BOOL;						// Enable communication
	//Byte purpose data
	wRegistersReadQuantity			: WORD;						// Amount of data do read
	wRegistersWriteQuantity			: WORD;						// Amount of data do read
	iRegisterReadStartAdress		: UINT;						// First adress of read registers data
	iRegisterWriteStartAdress		: UINT;						// First adress of write registers data
	iMaxCommunicationCycleTime		: INT;						//Maximum cycles to perform communication without error
END_VAR
VAR_OUTPUT
	bCommunicationError				: BOOL;						//Block state informaing about communication error
	iCommunicationErrorCode			: UDINT;					//Block state informaing about communication error
	bCommunicationBlockCycleExtended: BOOL;						//Communication Cycle extened
	iCommunicationCycleTime			: INT;						//
END_VAR

VAR
	iCommunicationStep 				: INT;	
	iCycleCalc						: INT;
	iLastCycleTimeClear				: TON;
	fbModbusTCP 					: FB_MBReadWriteRegs;
	arRegisterReadArray				: ARRAY[0..29] OF INT;
	arRegisterWriteArray			: ARRAY[0..29] OF INT;
	iHistoryError					: INT;
	arModbusErrorHist				: ARRAY[0..100] OF UDINT;
	iLasthistory					: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//--------------------------------------------------------------------------------------------------
//Communication monitor
IF iCycleCalc > iMaxCommunicationCycleTime THEN
	bCommunicationError := TRUE;
	bCommunicationBlockCycleExtended := TRUE;
ELSIF fbModbusTCP.bError THEN
	bCommunicationError := TRUE;
	bCommunicationBlockCycleExtended := FALSE;
ELSE
	bCommunicationError := FALSE;
	bCommunicationBlockCycleExtended := FALSE;
END_IF
iCommunicationErrorCode := fbModbusTCP.nErrId;
IF iCycleCalc > iCommunicationCycleTime	  THEN
	iCommunicationCycleTime	:= iCycleCalc;
END_IF
iLastCycleTimeClear(IN:=TRUE,PT:=T#100MS);
IF iLastCycleTimeClear.Q THEN
	iCommunicationCycleTime := 0;
	iLastCycleTimeClear(IN:=FALSE);
END_IF
//--------------------------------------------------------------------------------------------------
//Statistic
//--------------------------------------------------------------------------------------------------
//Cycle counter
IF bEnableCommunication THEN
	iCycleCalc := iCycleCalc +1;
ELSE
	iCycleCalc := 0;
END_IF

//--------------------------------------------------------------------------------------------------
//SetUp for Ip Adress
fbModbusTCP.sIPAddr 			:= sIpAdress;
//--------------------------------------------------------------------------------------------------
//SetUp for Port No.
fbModbusTCP.nTCPPort 			:= iPort;
//--------------------------------------------------------------------------------------------------
//SetUp for Unit Id
fbModbusTCP.nUnitID 			:= iUnitId;
//--------------------------------------------------------------------------------------------------
//SetUp for TimeOut
fbModbusTCP.tTimeout 			:= tCommunicationTimeOut;
//--------------------------------------------------------------------------------------------------
//SetUp for First register
	//Read
fbModbusTCP.nMBReadAddr 		:= iRegisterReadStartAdress;
	//Write
fbModbusTCP.nMBWriteAddr 		:= iRegisterWriteStartAdress;
//--------------------------------------------------------------------------------------------------
//SetUp for data quantity
	//Read
fbModbusTCP.nReadQuantity 		:= UINT_TO_WORD(wRegistersReadQuantity);
	//Write
fbModbusTCP.nWriteQuantity 		:= UINT_TO_WORD(wRegistersWriteQuantity);
//--------------------------------------------------------------------------------------------------
//SetUp for data length
	//Read
fbModbusTCP.cbDestLength 		:= SIZEOF(arRegisterReadArray);
	//Write
fbModbusTCP.cbSrcLength 		:= SIZEOF(arRegisterWriteArray);
//--------------------------------------------------------------------------------------------------
//SetUp for data write adress
fbModbusTCP.pSrcAddr 			:= ADR(arRegisterWriteArray);
//--------------------------------------------------------------------------------------------------
//SetUp for data write adress
fbModbusTCP.pDestAddr 			:= ADR(arRegisterReadArray);

	//--------------------------------------------------------------------------------------------------
	//Background Operations
	fbModbusTCP();
	//--------------------------------------------------------------------------------------------------
	// Main loop for communication exchange
IF bEnableCommunication THEN
	CASE iCommunicationStep  OF 
		0:		//Initialization
		IF iCommunicationPerformEvery <= iCycleCalc THEN
			iCommunicationStep := 2;
			iCycleCalc := 0;
		END_IF
		2:		//Data setup
			//--------------------------------------------------------------------------------------------------
			// Data Write
			arRegisterWriteArray[0]					:= stMachineDataPIM.iProductId;
			arRegisterWriteArray[10]				:= BOOL_TO_INT(stMachineDataPIM.bLifeBitPLC);
			arRegisterWriteArray[11]				:= BOOL_TO_INT(stMachineDataPIM.bWorkAllow);
			arRegisterWriteArray[12]				:= BOOL_TO_INT(stMachineDataPIM.bResetError);
			arRegisterWriteArray[13]				:= BOOL_TO_INT(stMachineDataPIM.bConfirmError);
			arRegisterWriteArray[14]				:= BOOL_TO_INT(stMachineDataPIM.bTestMode);
			arRegisterWriteArray[15]				:= BOOL_TO_INT(stMachineDataPIM.bStopPerform);
			arRegisterWriteArray[18]				:= BOOL_TO_INT(stMachineDataPIM.bWaitWithWork);
			arRegisterWriteArray[19]				:= BOOL_TO_INT(stMachineDataPIM.bOfflineWorkAllow);
			iCommunicationStep := 5;
		5: 		//Read Coils
			//--------------------------------------------------------------------------------------------------
			// Perform data exchange
			fbModbusTCP.bExecute := TRUE;
			IF fbModbusTCP.bBusy THEN
				iCommunicationStep := 6;
				fbModbusTCP.bExecute := FALSE;
			END_IF
		6:		//Wait for end of 
			//--------------------------------------------------------------------------------------------------
			// Wait for end
			IF  NOT fbModbusTCP.bBusy THEN
				iCommunicationStep := 10;
			END_IF
		10:		//Read data form buffer
			//--------------------------------------------------------------------------------------------------
			// Data rewrite
			stMachineDataPIM.iActualWorkStep		:= arRegisterReadArray[0];
			stMachineDataPIM.wGoodPartsAmount		:= INT_TO_WORD(arRegisterReadArray[1]*256+arRegisterReadArray[2]);
			stMachineDataPIM.wBadPartsAmount		:= INT_TO_WORD(arRegisterReadArray[3]*256+arRegisterReadArray[4]);
			stMachineDataPIM.iCycleTime				:= arRegisterReadArray[5];
			stMachineDataPIM.iPartsCreatedInOneTime	:= arRegisterReadArray[6];
			stMachineDataPIM.iErrorCode				:= arRegisterReadArray[7];
			stMachineDataPIM.bLifeBitMachine		:= INT_TO_BOOL(arRegisterReadArray[10]);
			stMachineDataPIM.bWorkInProgress		:= INT_TO_BOOL(arRegisterReadArray[11]);
			stMachineDataPIM.bCycleEnd				:= INT_TO_BOOL(arRegisterReadArray[12]);
			stMachineDataPIM.bError					:= INT_TO_BOOL(arRegisterReadArray[13]);
			stMachineDataPIM.bAlarm					:= INT_TO_BOOL(arRegisterReadArray[14]);	
			//stMachineDataPIM.bOfflineWorkAllow		:= INT_TO_BOOL(arRegisterReadArray[15]);
			iCommunicationStep := 0;
	END_CASE
END_IF



IF fbModbusTCP.nErrId <> 0 AND iHistoryError > iLastHistory THEN
arModbusErrorHist[iHistoryError] := fbModbusTCP.nErrId;
iLasthistory := iHistoryError;
iHistoryError := iHistoryError + 1;
IF iHistoryError >= 100 THEN
	iHistoryError := 0;
	MEMSET(destAddr:=ADR(arModbusErrorHist),fillByte:=0,n:=SIZEOF(arModbusErrorHist));
END_IF
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="fbDataExchangePIM">
      <LineId Id="283" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="288" Count="1" />
      <LineId Id="295" Count="0" />
      <LineId Id="290" Count="1" />
      <LineId Id="296" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="301" Count="2" />
      <LineId Id="306" Count="2" />
      <LineId Id="310" Count="0" />
      <LineId Id="309" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="382" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="383" Count="0" />
      <LineId Id="386" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="67" Count="1" />
      <LineId Id="70" Count="1" />
      <LineId Id="73" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="77" Count="1" />
      <LineId Id="80" Count="1" />
      <LineId Id="62" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="312" Count="0" />
      <LineId Id="98" Count="3" />
      <LineId Id="199" Count="0" />
      <LineId Id="388" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="263" Count="1" />
      <LineId Id="233" Count="5" />
      <LineId Id="232" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="265" Count="1" />
      <LineId Id="108" Count="0" />
      <LineId Id="112" Count="1" />
      <LineId Id="131" Count="0" />
      <LineId Id="114" Count="1" />
      <LineId Id="267" Count="1" />
      <LineId Id="116" Count="2" />
      <LineId Id="240" Count="0" />
      <LineId Id="249" Count="12" />
      <LineId Id="241" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="220" Count="1" />
      <LineId Id="230" Count="0" />
      <LineId Id="393" Count="0" />
      <LineId Id="399" Count="0" />
      <LineId Id="392" Count="0" />
      <LineId Id="394" Count="1" />
      <LineId Id="398" Count="0" />
      <LineId Id="396" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="224" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>