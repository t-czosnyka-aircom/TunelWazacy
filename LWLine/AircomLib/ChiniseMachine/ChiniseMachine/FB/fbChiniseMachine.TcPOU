<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="fbChiniseMachine" Id="{bb876810-7c49-4067-aa68-7bbad6fb385c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK fbChiniseMachine IMPLEMENTS I_StationMachine
VAR_IN_OUT
	stMachineModbusParams 		: stCommunicationParametriation;
	stMachineWorkParams			: stMachineParams;
END_VAR
VAR_INPUT
	bNextMachineWork : BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	fbModbuCommunication 		: fbDataExchangePIM;
	I_PimSystem					: I_PIM;
	bLastLifeBitState			: BOOL;						// Bool value used for detecion of Machine LifeBit change
	iWorkStep					: INT;						// Case step
	bServiceReset				: BOOL;						// Internal reset
	fbResetWaitTime				: TON;						// Timer used for delay faliure confirm and error confirm
	fbCommunicationTimeout 		: TON;						// Timer used for event to avoid lack of communiciaon on working machine
	fbLifeBitPLC				: TON;						// Rimer used top create ON OFF signla for lifeBit
	fbWorkEnded					: R_TRIG;					// Rising edgre reaction for end of cycle 
	iLastPartsRecord			: WORD;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[ACT_Background();

CASE iWorkStep OF
	0:	// Init
		iWorkStep := 5;
	5:	// Wait for next state
		I_PimSystem.mSetNewMachineState(nPIM_MachineStates._2_ReadyForNewOperation);	
		iWorkStep := 10;
	10: // Start of work
		IF stMachineModbusParams.stPimData.wGoodPartsAmount > iLastPartsRecord AND stMachineWorkParams.bPartsCount THEN
			IF I_PimSystem.mSetNewMachineState(nPIM_MachineStates._3_NewOperationStarted) THEN
				iLastPartsRecord := iLastPartsRecord +1;
				iWorkStep := 15;
				I_PimSystem.mSetNewMachineState(nPIM_MachineStates._4_OperationInProgress);
			END_IF
		END_IF
	15:	// Work ended
			iWorkStep := 5;
			I_PimSystem.mSetNewMachineState(nPIM_MachineStates._5_OperationEndedOK);
	90:	// Wysterowanie w przypadku błędu
		I_PimSystem.mSetNewMachineState(nPIM_MachineStates._8_WaitForReset);
		iWorkStep := 91;
	91:	// Oczekiwanie na reset
		IF I_PimSystem.mSetNewMachineState(nPIM_MachineStates._9_ResetInProgress) OR bServiceReset THEN
			bServiceReset := FALSE;
			stMachineModbusParams.stPimData.bResetError := TRUE;
			iWorkStep := 92;
		END_IF
	92: // Wait some time
		fbResetWaitTime(IN:=TRUE,PT:=T#2S);
		IF fbResetWaitTime.Q THEN
			fbResetWaitTime(IN:=FALSE,PT:=T#2S);
			stMachineModbusParams.stPimData.bResetError := FALSE;
			stMachineModbusParams.stPimData.bConfirmError := TRUE;
			iWorkStep := 93;
		END_IF
	93:	// Check error state
		fbResetWaitTime(IN:=TRUE,PT:=T#2S);
		IF NOT stMachineModbusParams.stPimData.bError THEN
			stMachineModbusParams.stPimData.bConfirmError := FALSE;
			iWorkStep := 95;
			fbResetWaitTime(IN:=TRUE,PT:=T#2S);
		ELSIF fbResetWaitTime.Q THEN
			fbResetWaitTime(IN:=TRUE,PT:=T#2S);
			stMachineModbusParams.stPimData.bResetError := FALSE;
			stMachineModbusParams.stPimData.bConfirmError := FALSE;
			mNewEvent(nEventClass:=nPIM_EventClasses.Error,nEvent:=stMachineModbusParams.stPimData.iErrorCode+stMachineWorkParams.iErrorPimOffset);
		END_IF
	95: // Potwierdzenie błędu itp
		I_PimSystem.mSetNewMachineState(nPIM_MachineStates._0_Standby_NotReady);
		stMachineModbusParams.stPimData.bResetError := FALSE;
		stMachineModbusParams.stPimData.bConfirmError := FALSE;
		iWorkStep := 5;
	
END_CASE]]></ST>
    </Implementation>
    <Action Name="ACT_Background" Id="{3c66ab7e-df3b-4eac-bce8-aa295899f957}">
      <Implementation>
        <ST><![CDATA[//Zabezpieczenie przed błędami w odczycie części do liczenia
IF ABS(iLastPartsRecord - stMachineModbusParams.stPimData.wGoodPartsAmount) > 5  THEN
	iLastPartsRecord := stMachineModbusParams.stPimData.wGoodPartsAmount;
END_IF
//Parts reset
IF stMachineModbusParams.stPimData.wGoodPartsAmount = 0 THEN
	iLastPartsRecord := 0;
END_IF



//Communiciaton
fbModbuCommunication (
				bEnableCommunication:=stMachineModbusParams.bCommunicationActive,
				stMachineDataPIM:=stMachineModbusParams.stPimData,
				sIpAdress:=stMachineModbusParams.sIpAdress,
				iPort:=stMachineModbusParams.iPort,
				iUnitId:=stMachineModbusParams.iUnitId,
				tCommunicationTimeOut:=T#2S,
				iCommunicationPerformEvery:=stMachineModbusParams.iCommunicationCycleTime,
				iMaxCommunicationCycleTime:=1000,
				wRegistersReadQuantity :=20,
				wRegistersWriteQuantity :=20,
				iRegisterReadStartAdress:=INT_TO_UINT(nByteRegisterForPIM.iActualWorkStep),
				iRegisterWriteStartAdress:=INT_TO_UINT(nByteRegisterForPIM.iProductId));
				
// Check of Error
IF stMachineModbusParams.stPimData.bError AND iWorkStep < 90 THEN
	mNewEvent(nEventClass:=nPIM_EventClasses.Error,nEvent:=stMachineModbusParams.stPimData.iErrorCode+stMachineWorkParams.iErrorPimOffset);
	iWorkStep:=90;
END_IF

// Check of communication
IF stMachineModbusParams.bCommunicationActive THEN
	fbCommunicationTimeout(IN:=TRUE,PT:=T#10S);
	IF stMachineModbusParams.stPimData.bLifeBitMachine <> bLastLifeBitState THEN
		bLastLifeBitState := stMachineModbusParams.stPimData.bLifeBitMachine;
		fbCommunicationTimeout(IN:=FALSE);
	END_IF
	IF fbCommunicationTimeout.Q AND iWorkStep < 90 THEN
		mNewEvent(nEventClass:=nPIM_EventClasses.Error,nEvent:=nChiniseMachineErrorCodes.communicationError);
	END_IF
END_IF

// Need to add iPartsCreatedInOneTime!!!
fbLifeBitPLC(IN:=NOT fbLifeBitPLC.Q ,PT:=T#500MS);
stMachineModbusParams.stPimData.bLifeBitPLC := fbLifeBitPLC.Q XOR stMachineModbusParams.stPimData.bLifeBitPLC;

//Rewrite signals from PIM System
//stMachineModbusParams.stPimData.bOfflineWorkAllow :=FALSE;
stMachineModbusParams.stPimData.bStopPerform:=I_PimSystem.prPimBlockWork;
stMachineModbusParams.stPimData.bTestMode:=I_PimSystem.prTestMode;
stMachineModbusParams.stPimData.bWaitWithWork:=I_PimSystem.prPlcBlockWork;
stMachineModbusParams.stPimData.bWorkAllow:=I_PimSystem.prWorkPermission ;//AND bNextMachineWork;
stMachineModbusParams.stPimData.iProductId := 0;

//Triggers
fbWorkEnded(CLK:=stMachineModbusParams.stPimData.bCycleEnd);

]]></ST>
      </Implementation>
    </Action>
    <Method Name="FB_init" Id="{61f7d707-ded4-4d10-8c29-a784b1b78aee}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains	: BOOL;
	bInCopyCode 	: BOOL;
	I_Pim			: I_PIM;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[I_PimSystem := I_Pim;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mGetParamsData" Id="{fbc6dcea-84e2-4ddd-b397-366f53d6f1b2}">
      <Declaration><![CDATA[// Metoda TRUE kiedy dane wyjściowe są ok, jeśli nie FALSE (jeśli not bBusy i FALSE to błąd odczytu) 
METHOD mGetParamsData : BOOL
VAR_INPUT
	bTestParams:	BOOL;	// Jeśli TRUE metoda okresla czy ma dostęp do parametrów, jeśli tak zwraca TRUE, jeśli nie FALSE
END_VAR
VAR_OUTPUT
	bBusy:BOOL;		// Maszyna odświeża dane
	pMachineParametersStruct: POINTER TO BYTE;	// Wskaźnik do parametrów pracy maszyny
	uiMachineParametersSize: UINT;				// Rozmiar struktury parametrów pracy maszyny [bajty]
	wActualCRC16SumInMachine: WORD;				// Aktualna suma CRC16 obliczona z parametrów
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bTestParams THEN
	mGetParamsData := FALSE;
ELSE
	pMachineParametersStruct := 0;
	uiMachineParametersSize := 0;
	bBusy := FALSE;
	mGetParamsData := TRUE;	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mNewEvent" Id="{986dd845-751a-4d45-997d-ac57d48351bf}">
      <Declaration><![CDATA[METHOD INTERNAL mNewEvent : BOOL
VAR_INPUT
	nEventClass:nPIM_EventClasses;
	nEvent: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF nEventClass = nPIM_EventClasses.AlarmAutoConfirm OR nEventClass = nPIM_EventClasses.Message THEN		// Alarm nieblokadowy
	I_PimSystem.mSetNewMachineState(nPIM_MachineStates._0_Initialization);
	iWorkStep := 90;
ELSE
	I_PimSystem.mSetNewMachineState(nPIM_MachineStates._7_ErrorOccurr);

	I_PimSystem.mNewEvent(iEventId := nEvent, nEventType := nEventClass, tMessageTime := T#0S);
	iWorkStep := 90;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="fbChiniseMachine">
      <LineId Id="102" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="85" Count="3" />
      <LineId Id="28" Count="1" />
      <LineId Id="126" Count="0" />
      <LineId Id="129" Count="1" />
      <LineId Id="127" Count="1" />
      <LineId Id="93" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="43" Count="1" />
      <LineId Id="46" Count="2" />
      <LineId Id="67" Count="0" />
      <LineId Id="50" Count="2" />
      <LineId Id="68" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="78" Count="1" />
      <LineId Id="133" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="157" Count="1" />
      <LineId Id="82" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="159" Count="1" />
      <LineId Id="84" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="26" Count="0" />
    </LineIds>
    <LineIds Name="fbChiniseMachine.ACT_Background">
      <LineId Id="86" Count="0" />
      <LineId Id="96" Count="1" />
      <LineId Id="95" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="87" Count="2" />
      <LineId Id="91" Count="1" />
      <LineId Id="90" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="73" Count="10" />
      <LineId Id="40" Count="0" />
      <LineId Id="1" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="65" Count="2" />
      <LineId Id="25" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="41" Count="4" />
      <LineId Id="50" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="63" Count="0" />
    </LineIds>
    <LineIds Name="fbChiniseMachine.FB_init">
      <LineId Id="3" Count="0" />
    </LineIds>
    <LineIds Name="fbChiniseMachine.mGetParamsData">
      <LineId Id="44" Count="6" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="fbChiniseMachine.mNewEvent">
      <LineId Id="5" Count="8" />
    </LineIds>
  </POU>
</TcPlcObject>